list.of.packages <- c("dplyr", "doMC", "foreach", "iterators",
"parallel", "randomForest", "xts", "zoo",
"lazyeval", "sirad", "missForest", "rgeos",
"gstat", "geosphere", "rgdal", "optparse")
Gauss.Kruger.coordinates
# -----------------------------------------------------------------------------#
# --- PASO 1. Cargar paquetes necesarios                                    ----
# -----------------------------------------------------------------------------#
#rm(list = ls()); gc()
Sys.setenv(TZ = "UTC")
list.of.packages <- c("dplyr", "doMC", "foreach", "iterators",
"parallel", "randomForest", "xts", "zoo",
"lazyeval", "sirad", "missForest", "rgeos",
"gstat", "geosphere", "rgdal", "optparse")
for (pack in list.of.packages) {
if (!require(pack, character.only = TRUE)) {
stop(paste0("Paquete no encontrado: ", pack))
}
}
rm(pack); gc()
# ------------------------------------------------------------------------------
# -----------------------------------------------------------------------------#
# --- PASO 2. Leer archivo de configuracion                                 ----
# -----------------------------------------------------------------------------#
normalize_dirnames <- function(dirnames) {
if (is.atomic(dirnames))
dirnames <- base::sub('/$', '', dirnames)
if (!is.atomic(dirnames))
for (nm in names(dirnames))
dirnames[[nm]] <- normalize_dirnames(dirnames[[nm]])
return (dirnames)
}
# a) YAML de configuracion
args <- base::commandArgs(trailingOnly = TRUE)
if (length(args) > 0) {
archivo.config <- args[1]
} else {
# No vino el archivo de configuracion por linea de comandos. Utilizo un archivo default
archivo.config <- paste0(getwd(), "/configuracion.yml")
}
if (! file.exists(archivo.config)) {
stop(paste0("El archivo de configuración ", archivo.config, " no existe\n"))
} else {
cat(paste0("Leyendo archivo de configuración ", archivo.config, "...\n"))
config <- yaml::yaml.load_file(archivo.config)
config$dir <- normalize_dirnames(config$dir)
}
# b) YAML de parametros
if (length(args) > 1) {
archivo.params <- args[2]
} else {
# No vino el archivo de configuracion por linea de comandos. Utilizo un archivo default
archivo.params <- paste0(getwd(), "/parametros.yml")
}
if (! file.exists(archivo.params)) {
stop(paste0("El archivo de parámetros ", archivo.params, " no existe\n"))
} else {
cat(paste0("Leyendo archivo de parámetros ", archivo.params, "...\n"))
config$params <- yaml::yaml.load_file(archivo.params)
}
# c) YAML de configuración de la API
if (length(args) > 1) {
archivo.config.api <- args[3]
} else {
# No vino el archivo de configuracion por linea de comandos. Utilizo un archivo default
archivo.config.api <- paste0(getwd(), "/configuracion_api.yml")
}
if (! file.exists(archivo.config.api)) {
stop(paste0("El archivo de configuración ", archivo.config.api, " no existe\n"))
} else {
cat(paste0("Leyendo archivo de configuración ", archivo.config.api, "...\n"))
config$api <- yaml::yaml.load_file(archivo.config.api)$api
}
# d) Preparar carpetas de salida, crearlas si no existen
config$dir$outputs <- glue::glue('{config$dir$outputs}/{config$params$run_id}')
if (!fs::dir_exists(config$dir$outputs))
fs::dir_create(config$dir$outputs)
config$dir$weather <- glue::glue('{config$dir$weather}/{config$params$run_id}')
if (!fs::dir_exists(config$dir$weather))
fs::dir_create(config$dir$weather)
# ------------------------------------------------------------------------------
# -----------------------------------------------------------------------------#
# --- PASO 3. Cargar librerias                                              ----
# -----------------------------------------------------------------------------#
# a) Cargar funciones necesarias
source(glue::glue("./lib/helpers.R"), echo = FALSE)
source(glue::glue("./lib/crc-api.R"), echo = FALSE)
source(glue::glue("./lib/impute/Estimar.R"), echo = FALSE)
source(glue::glue("./lib/impute/Impute.R"), echo = FALSE)
source(glue::glue("./lib/impute/Params.R"), echo = FALSE)
source(glue::glue("./lib/impute/Utils.R"), echo = FALSE)
# b) Variable para almacenar los posibles errores
errors <- c()
# ------------------------------------------------------------------------------
# -----------------------------------------------------------------------------#
# --- PASO 4. Leer/procesar variables de entrada                            ----
# -----------------------------------------------------------------------------#
# Datos de entrada
años <- base::seq(from = config$params$weather$start_year, to = config$params$weather$end_year)
suelos <- purrr::pmap_dfr(
.l = utils::tail(config$params$soils, -1) %>% purrr::transpose(),
.f = function(..., nombres_columnas) {
tibble::tibble(..., .name_repair = "minimal") %>% setNames(nombres_columnas) },
nombres_columnas = config$params$soils[[1]]
)
# Creamos un array con los OMM ID's de las estaciones sobre las que queremos estimar.
estacionesID <- suelos %>% dplyr::distinct(weather_id) %>% dplyr::pull()
# Control número de estaciones
stopifnot(length(estacionesID) > 0)
# ------------------------------------------------------------------------------
# -----------------------------------------------------------------------------#
# --- PASO 5. Iniciar proceso de imputación                                 ----
# -----------------------------------------------------------------------------#
httr::set_config( httr::config(ssl_verifypeer = FALSE) )
# Obtenemos los datos de las estaciones.
estaciones <- purrr::map_dfr(
.x = config$params$weather$countries,
.f = function(pais) {
est <- ConsumirServicioJSON(url = paste0(config$api$url, glue::glue("/estaciones/{pais}")),
usuario = config$api$user, clave = config$api$pass)
est <- est %>%
dplyr::mutate(pais_id = pais)
return (est)
}
)
# Renombrar columnas y filtrar estaciones
estaciones <- estaciones %>%
dplyr::rename(lon_dec = longitud, lat_dec = latitud, elev = elevacion) %>%
dplyr::filter(omm_id %in% estacionesID)
# Calculamos las coordenadas en Gauss Kruger de cada estación.
GK.coords <- Gauss.Kruger.coordinates(estaciones)
GK.coords
View(GK.coords)
# Agregamos las coordenadas x e y (GK) de cada estación.
estaciones <- data.frame(sp::coordinates(GK.coords), estaciones)
estaciones
Gauss.Kruger.coordinates
sp::coordinates(GK.coords)
R.version
